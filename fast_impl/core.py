# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_arch_summary.ipynb (unless otherwise specified).

__all__ = ['get_module', 'arch_summary']

# Cell
from fastai2.vision.all import *

# Cell
def _is_sequential(o): return o.__class__.__name__=='Sequential'
def _is_fn(o): return isinstance(o,(types.FunctionType, functools.partial))

def get_module(o,i):
  "Recursively get the module from list of indices"
  if is_listy(i):
    m = get_module(o,i[0])
    if len(i)==1: return m
    return get_module(m,i[1:])
  return o[i] if is_listy(o) else list(o.children())[i]

def arch_summary(arch,idx=None,verbose=False):
  "Short architecture summary, used for holistic understanding and deciding parameter groups"
  model = arch(False) if _is_fn(arch) else arch
  if idx is not None:
    model = get_module(model,idx)
  for i, l in enumerate(model.children()):
      n_layers = len(l if _is_sequential(l) else flatten_model(l))
      print(f'({i:<2}) {l.__class__.__name__:<17}: {n_layers:<4}layers')
      if verbose and l.has_children:
        layers = [x.__class__.__name__ for x in l.children()]
        for il in layers:
          print(" "*5,il)
